"use strict";(self.webpackChunkkusk_gateway_docs_2=self.webpackChunkkusk_gateway_docs_2||[]).push([[2346],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(o,".").concat(m)]||d[m]||p[m]||s;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7608:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const s={},i="Using Cert Manager with Kusk Gateway",l={unversionedId:"guides/cert-manager",id:"guides/cert-manager",title:"Using Cert Manager with Kusk Gateway",description:"Cert Manager and Kusk Gateway work well together. Cert Manager is a way to easily issue and automatically rotate certificates.",source:"@site/docs/guides/cert-manager.md",sourceDirName:"guides",slug:"/guides/cert-manager",permalink:"/guides/cert-manager",draft:!1,editUrl:"https://github.com/kubeshop/kusk-gateway/docs/guides/cert-manager.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OpenAPI Overlays",permalink:"/guides/overlays"},next:{title:"Troubleshooting",permalink:"/guides/troubleshooting"}},o={},c=[{value:"<strong>Install Cert Manager</strong>",id:"install-cert-manager",level:2},{value:"<strong>Issue a Certificate</strong>",id:"issue-a-certificate",level:2},{value:"<strong>Using the Certificate in Kusk Gateway</strong>",id:"using-the-certificate-in-kusk-gateway",level:2},{value:"<strong>Rotating Secrets</strong>",id:"rotating-secrets",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-cert-manager-with-kusk-gateway"},"Using Cert Manager with Kusk Gateway"),(0,r.kt)("p",null,"Cert Manager and Kusk Gateway work well together. Cert Manager is a way to easily issue and automatically rotate certificates."),(0,r.kt)("p",null,"Kusk Gateway can be instructed to use those certificates by defining them in your ",(0,r.kt)("inlineCode",{parentName:"p"},"EnvoyFleet"),"."),(0,r.kt)("p",null,"Kusk Gateway will also watch your certificates for updates and will reload the EnvoyFleet config automatically\nwithout the need for any manual actions."),(0,r.kt)("h2",{id:"install-cert-manager"},(0,r.kt)("strong",{parentName:"h2"},"Install Cert Manager")),(0,r.kt)("p",null,"Cert Manager can be installed using the following command which uses the default configuration."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml")),(0,r.kt)("p",null,"For other installation methods, refer to Cert Manager's installation ",(0,r.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/installation/"},"document"),"."),(0,r.kt)("h2",{id:"issue-a-certificate"},(0,r.kt)("strong",{parentName:"h2"},"Issue a Certificate")),(0,r.kt)("p",null,"To issue a certificate, we need to define an Issuer or ClusterIssuer. This defines which Certificate Authority Cert Manager will be used to issue the certificate."),(0,r.kt)("p",null,"For demonstration purposes, let's use a simple self-signed certificate issuer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"kubectl apply -f - <<EOF\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: test-selfsigned\n  namespace: default\nspec:\n  selfSigned: {}\nEOF\n")),(0,r.kt)("p",null,"We can now issue a self-signed certificate using this issuer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"kubectl apply -f - <<EOF\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: selfsigned-cert\n  namespace: default\nspec:\n  dnsNames:\n    - example.com\n  secretName: selfsigned-cert-tls\n  issuerRef:\n    name: test-selfsigned\nEOF\n")),(0,r.kt)("p",null,"Cert manager will react to the creation of this Certificate resource and produce for us a Kubernetes secret\nthat contains the certificate we can use in Kusk Gateway to secure your endpoints with TLS (Transport Layer Security)."),(0,r.kt)("p",null,"Fetch the list of secrets to confirm that our certificate was created:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f kubectl get secrets\nNAME                  TYPE                                  DATA   AGE\n...\nselfsigned-cert-tls   kubernetes.io/tls                     3      103s\n")),(0,r.kt)("p",null,"Describe the secret:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f kubectl describe secret selfsigned-cert-tls\nName:         selfsigned-cert-tls\nNamespace:    default\nLabels:       <none>\nAnnotations:  cert-manager.io/alt-names: example.com\n              cert-manager.io/certificate-name: selfsigned-cert\n              cert-manager.io/common-name:\n              cert-manager.io/ip-sans:\n              cert-manager.io/issuer-group:\n              cert-manager.io/issuer-kind: Issuer\n              cert-manager.io/issuer-name: test-selfsigned\n              cert-manager.io/uri-sans:\n\nType:  kubernetes.io/tls\n\nData\n====\ntls.crt:  1021 bytes\ntls.key:  1679 bytes\nca.crt:   1021 bytes\n")),(0,r.kt)("h2",{id:"using-the-certificate-in-kusk-gateway"},(0,r.kt)("strong",{parentName:"h2"},"Using the Certificate in Kusk Gateway")),(0,r.kt)("p",null,"In your EnvoyFleet definition, add the following TLS settings into the spec field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"apiVersion: gateway.kusk.io/v1alpha1\nkind: EnvoyFleet\nmetadata:\n  name: default\nspec:\n    ...\n    tls:\n     tlsSecrets:\n       - secretRef: selfsigned-cert-tls\n         namespace: default\n")),(0,r.kt)("p",null,"We defined the hostname in the certificate as example.com, therefore, your API will need to have this host in the hosts array of the x-kusk extension to make use of the secret."),(0,r.kt)("p",null,"We can confirm the details of the certificate using OpenSSL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"echo | \\\n    openssl s_client -servername example.com -connect example.com:443 2>/dev/null | \\\n    openssl x509 -text\n")),(0,r.kt)("p",null,"For this example, you will need to add example.com to your ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," file pointing at the envoy service public IP running in the cluster."),(0,r.kt)("h2",{id:"rotating-secrets"},(0,r.kt)("strong",{parentName:"h2"},"Rotating Secrets")),(0,r.kt)("p",null,"Kusk Gateway will watch for updates to your secrets in any of its EnvoyFleets and update the config to use them\nautomatically, without any manual intervention needed"),(0,r.kt)("p",null,"We can force a certificate rotation using cmctl and then check that Kusk Gateway does register the change\nand update the config accordingly."),(0,r.kt)("p",null,"You will need to have ",(0,r.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/usage/cmctl/#installation"},"cmctl installed"),"."),(0,r.kt)("p",null,"Now we can issue a ",(0,r.kt)("inlineCode",{parentName:"p"},"renew")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f cmctl renew selfsigned-cert\nManually triggered issuance of Certificate default/selfsigned-cert\n")),(0,r.kt)("p",null,"This will mark the named secret for manual renewal by cert-manager and it should do so relatively quickly."),(0,r.kt)("p",null,"Use OpenSSL again to check the updated certificate:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"echo | \\\n    openssl s_client -servername example.com -connect example.com:443 2>/dev/null | \\\n    openssl x509 -text\n")))}p.isMDXComponent=!0}}]);