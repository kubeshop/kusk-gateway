"use strict";(self.webpackChunkkusk_gateway_docs_2=self.webpackChunkkusk_gateway_docs_2||[]).push([[9140],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=l,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,r(r({ref:t},c),{},{components:n})):a.createElement(g,r({ref:t},c))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24832:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),l=(n(67294),n(3905));const o={},r="5. Connecting an Application",i={unversionedId:"getting-started/connecting-an-application",id:"getting-started/connecting-an-application",title:"5. Connecting an Application",description:"In the previous section, you've mocked the API to provide fake results so developers can start working on it.",source:"@site/docs/getting-started/connecting-an-application.md",sourceDirName:"getting-started",slug:"/getting-started/connecting-an-application",permalink:"/getting-started/connecting-an-application",draft:!1,editUrl:"https://github.com/kubeshop/kusk-gateway/docs/getting-started/connecting-an-application.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"4. Mock an API",permalink:"/getting-started/mock-an-api"},next:{title:"OpenAPI Extension Reference",permalink:"/extension"}},p={},s=[{value:"Deploy a sample application",id:"deploy-a-sample-application",level:2},{value:"Update the OpenAPI definition",id:"update-the-openapi-definition",level:2},{value:"Deploy the updates to Kusk Gateway",id:"deploy-the-updates-to-kusk-gateway",level:2},{value:"Test the API",id:"test-the-api",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"5-connecting-an-application"},"5. Connecting an Application"),(0,l.kt)("p",null,"In the previous section, you've mocked the API to provide fake results so developers can start working on it. "),(0,l.kt)("p",null,"In this section, you will deploy an application to your Kubernetes cluster and learn how to access it using Kusk Gateway. "),(0,l.kt)("h2",{id:"deploy-a-sample-application"},"Deploy a sample application"),(0,l.kt)("p",null,"Deploy the following sample web server that has a ",(0,l.kt)("inlineCode",{parentName:"p"},"/hello")," route:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl create deployment hello-world --image=kubeshop/kusk-hello-world:v1.0.0\nkubectl expose deployment hello-world --name hello-world-svc --port=8080\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"deployment.apps/hello-world created\nservice/hello-world-svc exposed\n")),(0,l.kt)("h2",{id:"update-the-openapi-definition"},"Update the OpenAPI definition"),(0,l.kt)("p",null,"First, disable Kusk's mocking of the API by delete the ",(0,l.kt)("inlineCode",{parentName:"p"},"mocking")," section from the ",(0,l.kt)("inlineCode",{parentName:"p"},"api.yaml")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-diff"},"...\n- mocking:\n-  enabled: true\n...\n")),(0,l.kt)("p",null,"Now use the ",(0,l.kt)("inlineCode",{parentName:"p"},"upstream")," policy with the details of the service we just created, this tells Kusk that about our deployed application:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"x-kusk:\n upstream:\n  service:\n    name: hello-world-svc\n    namespace: default\n    port: 8080\n")),(0,l.kt)("p",null,"The resulting file should look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="api.yaml"',title:'"api.yaml"'},"openapi: 3.0.0\ninfo:\n  title: simple-api\n  version: 0.1.0\nx-kusk:\n  upstream:\n    service:\n      name: hello-world-svc\n      namespace: default\n      port: 8080\npaths:\n  /hello:\n    get:\n      responses:\n        '200':\n          description: A simple hello world!\n          content:\n            text/plain:\n              schema:\n                type: string\n              example: Hello from a mocked response!\n")),(0,l.kt)("h2",{id:"deploy-the-updates-to-kusk-gateway"},"Deploy the updates to Kusk Gateway"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"kusk deploy -i api.yaml\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"\ud83c\udf89 successfully parsed api.yaml\n\u2705 initiallizing deployment to fleet kusk-gateway-envoy-fleet\n\ud83c\udf89 api.gateway.kusk.io/simple-api updated\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"You can watch the changed to the OpenAPI definition and automatically deploy it by using the watch feature: "),(0,l.kt)("pre",{parentName:"admonition"},(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"kusk deploy -i api.yaml -w\n"))),(0,l.kt)("h2",{id:"test-the-api"},"Test the API"),(0,l.kt)("p",null,"Again, let's get the IP address of the gateway by running: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},"123.45.67.89\n")),(0,l.kt)("p",null,"And now test the API using ",(0,l.kt)("inlineCode",{parentName:"p"},"curl"),": "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"curl 123.45.67.89/hello\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="Expected output:"',title:'"Expected','output:"':!0},'{"message":"Hello from an implemented service!"}\n')),(0,l.kt)("p",null,"This response is served from the deployed application. You have successfully deployed an application to Kusk Gateway!"))}u.isMDXComponent=!0}}]);