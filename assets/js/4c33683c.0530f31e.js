"use strict";(self.webpackChunkkusk_gateway_docs_2=self.webpackChunkkusk_gateway_docs_2||[]).push([[501],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(k,l(l({ref:t},s),{},{components:n})):r.createElement(k,l({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},553:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},l="Mock your API locally using Kusk",i={unversionedId:"reference/cli/mock-cmd",id:"reference/cli/mock-cmd",title:"Mock your API locally using Kusk",description:"Spin up a local mocking server that generates responses from your content schema or returns your defined examples.",source:"@site/docs/reference/cli/mock-cmd.md",sourceDirName:"reference/cli",slug:"/reference/cli/mock-cmd",permalink:"/reference/cli/mock-cmd",draft:!1,editUrl:"https://github.com/kubeshop/kusk-gateway/docs/reference/cli/mock-cmd.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installing Kusk Gateway with the Kusk CLI",permalink:"/reference/cli/install-cmd"},next:{title:"Generating API CRDs",permalink:"/reference/cli/generate-cmd"}},c={},p=[{value:"Example",id:"example",level:2},{value:"Provide your API",id:"provide-your-api",level:3},{value:"Launch Kusk Mocking Server",id:"launch-kusk-mocking-server",level:3},{value:"Interacting with your API",id:"interacting-with-your-api",level:3},{value:"Updating your API",id:"updating-your-api",level:3},{value:"Stop the server",id:"stop-the-server",level:3}],s={toc:p};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mock-your-api-locally-using-kusk"},"Mock your API locally using Kusk"),(0,o.kt)("p",null,"Spin up a local mocking server that generates responses from your content schema or returns your defined examples."),(0,o.kt)("p",null,"Kusk uses ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," to launch a mock server container."),(0,o.kt)("p",null,"All you need to get started is your OpenAPI definition."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("h3",{id:"provide-your-api"},"Provide your API"),(0,o.kt)("p",null,"Let's mock the following API using Kusk."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'openapi: 3.0.0\ninfo:\n  title: todo-backend-api\n  version: 0.0.2\npaths:\n  /todos:\n    get:\n      responses:\n        \'200\':\n          description: \'ToDos\'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  title:\n                    type: string\n                    description: Description of what to do\n                  completed:\n                    type: boolean\n                  order:\n                    type: integer\n                    format: int32\n                  url:\n                    type: string\n                    format: uri\n                required:\n                  - title\n                  - completed\n                  - order\n                  - url\n            application/xml:\n              example:\n                title: "Mocked XML title"\n                completed: true\n                order: 13\n                url: "http://mockedURL.com"\n            text/plain:\n              example: |\n                title: "Mocked Text title"\n                completed: true\n                order: 13\n                url: "http://mockedURL.com"\n')),(0,o.kt)("p",null,"It has a single path with 3 content types."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"application/json")," specifies a response schema which kusk will generate a generated response that matches"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"applications/xml")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"text/plain")," specifies examples which kusk will return as is.")),(0,o.kt)("h3",{id:"launch-kusk-mocking-server"},"Launch Kusk Mocking Server"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"kusk mocking example",src:n(3648).Z,width:"600",height:"375"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ kusk mock -i todo-backend-api.yaml\n\ud83c\udf89 successfully parsed OpenAPI spec\n\u2600\ufe0f initializing mocking server\n\ud83c\udf89 server successfully initialized\nURL: http://localhost:8080\n\u23f3 watching for file changes in todo-backend-api.yaml \n")),(0,o.kt)("p",null,"The mock server is now running and will watch for any changes you make to fake todo-backend-api.yaml."),(0,o.kt)("h3",{id:"interacting-with-your-api"},"Interacting with your API"),(0,o.kt)("p",null,"Let's curl the endpoint for a JSON response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ curl -H "Accept: application/json" localhost:8080/todos | jq\n{\n  "completed": true,\n  "order": 507256954,\n  "title": "Praesentium accusantium magni sequi saepe blanditiis. Officiis omnis sapiente laudantium quod. Vel dolorum voluptatibus sequi voluptatem voluptas nam.",\n  "url": "http://sanfordconroy.name/elda.hills"\n}\n')),(0,o.kt)("p",null,"The response returns matches the schema that we defined under the ",(0,o.kt)("inlineCode",{parentName:"p"},"application/json")," content response."),(0,o.kt)("p",null,"Let's now curl for ",(0,o.kt)("inlineCode",{parentName:"p"},"application/xml")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"text/plain")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ curl -H "Accept: application/xml" localhost:8080/todos\n\n<doc><completed>true</completed><order>13</order><title>Mocked XML title</title><url>http://mockedURL.com</url></doc>\n\n$ curl -H "Accept: text/plain" localhost:8080/todos\ntitle: "Mocked Text title"\ncompleted: true\norder: 13\nurl: "http://mockedURL.com"\n')),(0,o.kt)("p",null,"Here the examples defined above are returned."),(0,o.kt)("p",null,"Kusk mock prioritises examples over schema definitions."),(0,o.kt)("h3",{id:"updating-your-api"},"Updating your API"),(0,o.kt)("p",null,"Let's change the name of route ",(0,o.kt)("inlineCode",{parentName:"p"},"/todos")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"/foo"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note")," the file watcher doesn't pick up changes made in Vim - ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/fsnotify/fsnotify/issues/17"},"related issue"),". Use any other text editor to do this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"openapi: 3.0.0\ninfo:\n  title: todo-backend-api\n  version: 0.0.2\npaths:\n  /foo:\n  ...\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"...\n\u270d\ufe0f change detected in fake-api.yaml\n\u2600\ufe0f mock server restarted\n")),(0,o.kt)("p",null,"When a change is detected, the server is restarted to serve the upto date api."),(0,o.kt)("p",null,"Now we can curl the ",(0,o.kt)("inlineCode",{parentName:"p"},"/foo")," endpoint as before."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ curl -H "Accept: application/json" localhost:8080/foo\n$ curl -H "Accept: application/xml" localhost:8080/foo\n$ curl -H "Accept: text/plain" localhost:8080/foo\n')),(0,o.kt)("h3",{id:"stop-the-server"},"Stop the server"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ctrl+c")))}u.isMDXComponent=!0},3648:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/kusk-mock-073c36bdfe93050d537387b2af08e889.gif"}}]);