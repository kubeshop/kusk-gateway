name: pull-request

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main
    paths:
      - .github/workflows/**
      - api/**
      - build/**
      - cmd/**
      - examples/**
      - internal/**
      - pkg/**
      - smoketests/**

permissions:
  contents: read
  # allow read access to pull request. Use with `only-new-issues` option.
  pull-requests: read

jobs:
  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-22.04
    steps:
      - name: setup-go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=10m0s
          only-new-issues: true

  test-kusk-cli:
    name: Compile and Test Kusk CLI
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup-go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: setup-environment-variables
        run: |
          go version
          echo "VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: build-cli
        working-directory: cmd/kusk
        run: |
          go version
          VERSION=${{ github.sha }} make build

      - name: test-cli
        working-directory: cmd/kusk
        run: |
          go version
          make test

      - name: prepare-cli-manifests # this step will ensure that kusk kustomize manifests are build with the latest image tag github.sha
        working-directory: cmd/kusk
        run: |
          go version
          VERSION=${{ env.VERSION }} make manifests

  compile-and-unit-test-manager:
    name: compile-and-unit-test-manager
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup-go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: compile-and-unit-test-manager
        run: make test TelemetryToken=${{ secrets.TELEMETRY_TOKEN }}

  build-api-docker:
    name: Build API and websocket docker images
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push api-server
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./build/api-server/Dockerfile
          platforms: linux/amd64,linux/arm64

      - name: Build and push websocket
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./build/websocket/Dockerfile
          platforms: linux/amd64,linux/arm64

  e2e:
    name: e2e
    runs-on: ubuntu-22.04
    steps:
      - name: cluster-create-kind
        uses: helm/kind-action@v1.5.0
        with:
          cluster_name: kgw
          wait: 256s
          verbosity: 1

      - name: kubectl-get-services-all-namespaces-pre-loadbalancer-configuration
        run: |
          kubectl get svc --all-namespaces

      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: configure-loadbalancer
        run: |
          ./smoketests/cluster-config/kind/cluster-configure.sh

      - name: kubectl-get-services-all-namespaces-post-loadbalancer-configuration
        run: |
          kubectl get svc --all-namespaces

      - name: setup-go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: make-docker-build
        run: |
          echo 'building `kusk-gateway-manager` (control-plane) image'
          make docker-build

      - name: kind-load-docker-image
        run: |
          set -x
          kind load docker-image kubeshop/kusk-gateway:$(git describe --tags $(git rev-list --tags --max-count=1)) --name kgw

      - name: make-install
        run: |
          make install
          kubectl get svc --all-namespaces

      - name: make-deploy
        run: |
          echo 'installing `kusk-gateway-manager` (control-plane) image into cluster'
          make deploy
          kubectl get svc --all-namespaces
          kubectl rollout status --namespace kusk-system deployment/kusk-gateway-manager --watch --timeout=256s

      - name: make-deploy-envoyfleet
        run: |
          echo 'deploying `kusk-gateway-envoy-fleet` (default Envoy Fleet)'
          until make deploy-envoyfleet; do
            # A timing issue sometimes results in the below occuring:
            # Error from server (InternalError): error when creating "config/samples/gateway_v1_envoyfleet.yaml": Internal error occurred: failed calling webhook "menvoyfleet.kb.io": failed to call webhook: Post "https://kusk-gateway-webhooks-service.kusk-system.svc:443/mutate-gateway-kusk-io-v1alpha1-envoyfleet?timeout=10s": dial tcp 10.109.220.117:443: connect: connection refused
            echo "sleeping for 2 seconds before trying 'make deploy-envoyfleet' again ..."
            sleep 2
          done

          echo 'Waiting for `service/kusk-gateway-envoy-fleet` to get ingress ...'
          while [[ -z $(kubectl get service --namespace kusk-system kusk-gateway-envoy-fleet -o jsonpath="{.status.loadBalancer.ingress}" 2>/dev/null) ]]; do
            echo "still waiting for service/kusk-gateway-envoy-fleet to get ingress, sleeping for 2 seconds ..."
            sleep 2
          done
          echo "service/kusk-gateway-envoy-fleet now has ingress"
          kubectl get svc --all-namespaces

      - name: run-e2e
        run: |
          make check-all
