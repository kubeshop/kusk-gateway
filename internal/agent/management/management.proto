/*
MIT License

Copyright (c) 2022 Kubeshop

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
// The definition of the communication service between mocking service and manager

syntax = "proto3";

option go_package = "github.com/kubeshop/kusk-gateway/internal/agent/management";

package grpc;

// ConfigManager service continuously streams the snapshots of configuration to the client.
service ConfigManager {
  rpc GetSnapshot(ClientParams) returns (stream Snapshot) {}
}

// This client request message provides the node name and fleet ID.
message ClientParams {
  // Client node name
  string nodeName = 1;
  string fleetID = 2;
}

// Snapshot response message provides the snapshot of the configurations.
message Snapshot {
  MockConfig mockConfig = 1;
}

// MockConfig is the mapping of mockID to MockResponse struct
message MockConfig {
  map<string,MockResponse> MockResponses = 1;
}

// MockResponse is the mocking.MockResponse struct
message MockResponse {
	// HTTP Status Code
	uint32 StatusCode = 1;
  // Mapping of Media type to Media data
	// application/json -> []byte
	// application/xml -> []byte
	map <string, bytes> MediaTypeData = 2;
}
