// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigManagerClient is the client API for ConfigManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigManagerClient interface {
	GetMockSnapshot(ctx context.Context, in *ClientParams, opts ...grpc.CallOption) (ConfigManager_GetMockSnapshotClient, error)
}

type configManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigManagerClient(cc grpc.ClientConnInterface) ConfigManagerClient {
	return &configManagerClient{cc}
}

func (c *configManagerClient) GetMockSnapshot(ctx context.Context, in *ClientParams, opts ...grpc.CallOption) (ConfigManager_GetMockSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigManager_ServiceDesc.Streams[0], "/grpc.ConfigManager/GetMockSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &configManagerGetMockSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigManager_GetMockSnapshotClient interface {
	Recv() (*Snapshot, error)
	grpc.ClientStream
}

type configManagerGetMockSnapshotClient struct {
	grpc.ClientStream
}

func (x *configManagerGetMockSnapshotClient) Recv() (*Snapshot, error) {
	m := new(Snapshot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigManagerServer is the server API for ConfigManager service.
// All implementations must embed UnimplementedConfigManagerServer
// for forward compatibility
type ConfigManagerServer interface {
	GetMockSnapshot(*ClientParams, ConfigManager_GetMockSnapshotServer) error
	mustEmbedUnimplementedConfigManagerServer()
}

// UnimplementedConfigManagerServer must be embedded to have forward compatible implementations.
type UnimplementedConfigManagerServer struct {
}

func (UnimplementedConfigManagerServer) GetMockSnapshot(*ClientParams, ConfigManager_GetMockSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMockSnapshot not implemented")
}
func (UnimplementedConfigManagerServer) mustEmbedUnimplementedConfigManagerServer() {}

// UnsafeConfigManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigManagerServer will
// result in compilation errors.
type UnsafeConfigManagerServer interface {
	mustEmbedUnimplementedConfigManagerServer()
}

func RegisterConfigManagerServer(s grpc.ServiceRegistrar, srv ConfigManagerServer) {
	s.RegisterService(&ConfigManager_ServiceDesc, srv)
}

func _ConfigManager_GetMockSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigManagerServer).GetMockSnapshot(m, &configManagerGetMockSnapshotServer{stream})
}

type ConfigManager_GetMockSnapshotServer interface {
	Send(*Snapshot) error
	grpc.ServerStream
}

type configManagerGetMockSnapshotServer struct {
	grpc.ServerStream
}

func (x *configManagerGetMockSnapshotServer) Send(m *Snapshot) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigManager_ServiceDesc is the grpc.ServiceDesc for ConfigManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ConfigManager",
	HandlerType: (*ConfigManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMockSnapshot",
			Handler:       _ConfigManager_GetMockSnapshot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "management.proto",
}
