/*
 * Kusk Gateway API
 *
 * This is the Kusk Gateway Management API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"
)

// CreateNewFleetApiController binds http requests to an api service and writes the service results to the http response
type CreateNewFleetApiController struct {
	service      CreateNewFleetApiServicer
	errorHandler ErrorHandler
}

// CreateNewFleetApiOption for how the controller is set up.
type CreateNewFleetApiOption func(*CreateNewFleetApiController)

// WithCreateNewFleetApiErrorHandler inject ErrorHandler into controller
func WithCreateNewFleetApiErrorHandler(h ErrorHandler) CreateNewFleetApiOption {
	return func(c *CreateNewFleetApiController) {
		c.errorHandler = h
	}
}

// NewCreateNewFleetApiController creates a default api controller
func NewCreateNewFleetApiController(s CreateNewFleetApiServicer, opts ...CreateNewFleetApiOption) Router {
	controller := &CreateNewFleetApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the CreateNewFleetApiController
func (c *CreateNewFleetApiController) Routes() Routes {
	return Routes{
		{
			"CreateFleet",
			strings.ToUpper("Post"),
			"/fleets",
			c.CreateFleet,
		},
	}
}

// CreateFleet - create new fleet
func (c *CreateNewFleetApiController) CreateFleet(w http.ResponseWriter, r *http.Request) {
	serviceItemParam := ServiceItem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceItemParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceItemRequired(serviceItemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateFleet(r.Context(), serviceItemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
