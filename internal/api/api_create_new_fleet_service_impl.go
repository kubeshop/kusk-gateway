/*
 * Kusk Gateway API
 *
 * This is the Kusk Gateway Management API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"net/http"

	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"

	kuskv1 "github.com/kubeshop/kusk-gateway/api/v1alpha1"
	"github.com/kubeshop/kusk-gateway/pkg/analytics"
	"github.com/kubeshop/kusk-gateway/pkg/kusk"
)

// CreateNewFleetApiService is a service that implements the logic for the CreateNewFleetApiServicer
// This service should implement the business logic for every endpoint for the CreateNewFleetApi API.
// Include any external packages or services that will be required by this service.
type CreateNewFleetApiService struct {
	kuskClient kusk.Client
}

// NewCreateNewFleetApiService creates a default api service
func NewCreateNewFleetApiService(kuskClient kusk.Client) CreateNewFleetApiServicer {
	return &CreateNewFleetApiService{kuskClient: kuskClient}
}

// CreateFleet - create new fleet
func (s *CreateNewFleetApiService) CreateFleet(ctx context.Context, serviceItem ServiceItem) (ImplResponse, error) {
	analytics.SendAnonymousInfo(ctx, s.kuskClient.K8sClient(), "kusk-api-server", "CreateFleet")
	fleet := kuskv1.EnvoyFleet{
		ObjectMeta: v1.ObjectMeta{
			Name:      serviceItem.Name,
			Namespace: serviceItem.Namespace,
		},
		Spec: kuskv1.EnvoyFleetSpec{
			Service: &kuskv1.ServiceConfig{
				Type:  corev1.ServiceType(serviceItem.ServiceType),
				Ports: []corev1.ServicePort{},
			},
		},
	}

	for _, p := range serviceItem.Ports {
		servicePort := corev1.ServicePort{Name: p.Name,
			NodePort:   p.NodePort,
			Port:       p.Port,
			Protocol:   corev1.Protocol(p.Protocol),
			TargetPort: intstr.FromString(p.TargetPort),
		}
		fleet.Spec.Service.Ports = append(fleet.Spec.Service.Ports, servicePort)
	}

	if f, err := s.kuskClient.CreateFleet(fleet); err != nil {
		return GetResponseFromK8sError(err), err
	} else {
		return Response(http.StatusCreated, f), nil
	}
}
