/*
 * Kusk Gateway API
 *
 * This is the Kusk Gateway Management API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"io"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApisApiController binds http requests to an api service and writes the service results to the http response
type ApisApiController struct {
	service      ApisApiServicer
	errorHandler ErrorHandler
}

// ApisApiOption for how the controller is set up.
type ApisApiOption func(*ApisApiController)

// WithApisApiErrorHandler inject ErrorHandler into controller
func WithApisApiErrorHandler(h ErrorHandler) ApisApiOption {
	return func(c *ApisApiController) {
		c.errorHandler = h
	}
}

// NewApisApiController creates a default api controller
func NewApisApiController(s ApisApiServicer, opts ...ApisApiOption) Router {
	controller := &ApisApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the ApisApiController
func (c *ApisApiController) Routes() Routes {
	return Routes{
		{
			"DeleteApi",
			strings.ToUpper("Delete"),
			"/apis/{namespace}/{name}",
			c.DeleteApi,
		},
		{
			"UpdateApi",
			http.MethodPut,
			"/apis/{namespace}/{name}",
			c.UpdateApi,
		},
		{
			"DeployApi",
			strings.ToUpper("Post"),
			"/apis",
			c.DeployApi,
		},
		{
			"GetApi",
			strings.ToUpper("Get"),
			"/apis/{namespace}/{name}",
			c.GetApi,
		},
		{
			"GetApiCRD",
			strings.ToUpper("Get"),
			"/apis/{namespace}/{name}/crd",
			c.GetApiCRD,
		},
		{
			"GetApiDefinition",
			strings.ToUpper("Get"),
			"/apis/{namespace}/{name}/definition",
			c.GetApiDefinition,
		},
		{
			"GetApis",
			strings.ToUpper("Get"),
			"/apis",
			c.GetApis,
		},
	}
}

// DeleteApi - Delete an API instance by namespace and name
func (c *ApisApiController) DeleteApi(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	nameParam := params["name"]

	result, err := c.service.DeleteApi(r.Context(), namespaceParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	if err := EncodeJSONResponse(result.Body, &result.Code, w); err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

}

// UpdateApi - Update an API instance by namespace and name with new content
func (c *ApisApiController) UpdateApi(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	nameParam := params["name"]

	existingApi, err := c.service.GetApi(r.Context(), namespaceParam, nameParam)
	if err != nil {
		c.errorHandler(w, r, err, &existingApi)
		return
	}

	inlineObjectParam, err := decodeBodyToInlineObject(r.Body)
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}

	inlineObjectParam.Name = nameParam
	inlineObjectParam.Namespace = namespaceParam

	result, err := c.service.UpdateApi(r.Context(), inlineObjectParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	if err := EncodeJSONResponse(result.Body, &result.Code, w); err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
}

// DeployApi - Deploy new API
func (c *ApisApiController) DeployApi(w http.ResponseWriter, r *http.Request) {
	inlineObjectParam, err := decodeBodyToInlineObject(r.Body)
	if err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}

	result, err := c.service.DeployApi(r.Context(), inlineObjectParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	if err := EncodeJSONResponse(result.Body, &result.Code, w); err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

}

// GetApi - Get an API instance by namespace and name
func (c *ApisApiController) GetApi(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	nameParam := params["name"]

	result, err := c.service.GetApi(r.Context(), namespaceParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetApiCRD - Get API CRD from cluster
func (c *ApisApiController) GetApiCRD(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	nameParam := params["name"]

	result, err := c.service.GetApiCRD(r.Context(), namespaceParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetApiDefinition - Get API definition ( Post-Processed version )
func (c *ApisApiController) GetApiDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	namespaceParam := params["namespace"]

	nameParam := params["name"]

	result, err := c.service.GetApiDefinition(r.Context(), namespaceParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetApis - Get a list of APIs
func (c *ApisApiController) GetApis(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	fleetnameParam := query.Get("fleetname")
	fleetnamespaceParam := query.Get("fleetnamespace")
	namespaceParam := query.Get("namespace")
	result, err := c.service.GetApis(r.Context(), namespaceParam, fleetnameParam, fleetnamespaceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

func decodeBodyToInlineObject(body io.Reader) (InlineObject, error) {
	inlineObjectParam := InlineObject{}
	d := json.NewDecoder(body)
	d.DisallowUnknownFields()

	if err := d.Decode(&inlineObjectParam); err != nil {
		return InlineObject{}, &ParsingError{Err: err}
	}

	if err := AssertInlineObjectRequired(inlineObjectParam); err != nil {
		return InlineObject{}, err
	}

	return inlineObjectParam, nil
}
